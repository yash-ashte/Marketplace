import java.io.*;
import java.util.ArrayList;

/**
 * Product
 *
 * Class for storing info of products sold by stores
 *
 * @author Yash Ashtekar
 * @version 13/05/23
 */
public class Product implements Serializable {
    private String name;
    private String storeName;
    private String desc;
    private int quantity;
    private double price;
    private int sales; //Total # of purchases
    private double revenue; //Total revenue generated by all sales (accounts for price changes)

    public Product(String name, String storeName, String desc, int quantity, double price, int sales, double revenue) {
        this.name = name;
        this.storeName = storeName;
        this.desc = desc;
        this.quantity = quantity;
        this.price = price;
        this.sales = sales;
        this.revenue = revenue;
    }

    //getter and setter methods

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getStoreName() {
        return storeName;
    }

    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getSales() {
        return sales;
    }

    public void setSales(int sales) {
        this.sales = sales;
    }

    public double getRevenue() {
        return revenue;
    }

    public void setRevenue(double revenue) {
        this.revenue = revenue;
    }

    //other methods

    //Compares Products using product name and store name
    @Override
    public boolean equals(Object product) {
        if (product instanceof Product) {
            return (((Product) product).getName().equals(name) && ((Product) product).getStoreName().equals(storeName));
        }
        return false;
    }

    //Prints store parameters to single comma-delimited line (price & revenue truncated to 2 decimal places)
    @Override
    public String toString() {
        return String.format("%s,%s,%s,%d,%.2f,%d,%.2f", name, storeName, desc, quantity, price, sales, revenue);
    }

    //Creates new Product instance by reading line in format of toString
    public static Product parseProduct(String line) throws FileFormatException {
        try {
            String[] parameters = line.split(",");
            return new Product(parameters[0], parameters[1], parameters[2], Integer.parseInt(parameters[3]),
                    Double.parseDouble(parameters[4]), Integer.parseInt(parameters[5]),
                    Double.parseDouble(parameters[6]));
        } catch (Exception e) {
            throw new FileFormatException("Error reading product!");
        }
    }

    //Method for printing product's info to dashboard
    public void printUI() {
        System.out.printf(
                "Product: %s\n Sold by: %s\n Product Description: %s\n Price: %.2f\n Quantity in Stock: %d", name,
                storeName, desc, price, quantity);
    }

    //Takes in filename & arraylist of all products in marketplace, writes to file with data for all products
    //Throws IO exception if file cannot be created
    public static void updateProductFile(ArrayList<Product> productList,
                                         String filename) throws IOException {

        File productFile = new File(filename);
        productFile.createNewFile();

        PrintWriter printWriter = new PrintWriter(new FileOutputStream(productFile));

        for (Product product : productList) {
            printWriter.println(product.toString());
        }
        printWriter.close();
    }

    //Takes in filename, reads file & attempts to create new product instance from each line
    public static ArrayList<Product> readProductFile(
            String fileName) throws FileNotFoundException {
        File productFile = new File(fileName);
        BufferedReader reader = new BufferedReader(new FileReader(productFile));

        ArrayList<Product> productList = new ArrayList<>();

        try {
            String line = reader.readLine();
            while (line != null) {
                try {
                    productList.add(Product.parseProduct(line));
                    line = reader.readLine();
                } catch (FileFormatException ffe) {
                    line = reader.readLine();
                }
            }
            reader.close();

        } catch (IOException io) {
            System.out.print("");
            //No action needed
        }
        return productList;
    }

    //Updates quantity, sales, revenue for instance, and sends data to parent Store(customer & revenue from purchase)
    //Returns false if sale is not possible due to quantity
    public boolean recordSale(int quantitySold) {
        if (quantitySold <= quantity) {
            this.quantity -= quantitySold;
            this.sales += quantitySold;
            this.revenue += quantitySold * price;
            return true;
        } else return false;
    }

    //Prints product params to new csv file, returns true if successful
    public boolean exportProduct() {
        try {
            File exportFile = new File(name + ".csv");
            exportFile.createNewFile();

            FileOutputStream fileOutputStream = new FileOutputStream(exportFile);
            PrintWriter printWriter = new PrintWriter(fileOutputStream);

            printWriter.println(this.toString());
            printWriter.close();
            return true;

        } catch (IOException ie) {
            return false;
        } catch (Exception e) {
            return false;
        }
    }

    public Product importProduct(String fileName) throws FileNotFoundException, FileFormatException {
        File productFile = new File(fileName);
        BufferedReader reader = new BufferedReader(new FileReader(productFile));

        try {
            String line = reader.readLine();
            reader.close();
            return parseProduct(line);
        } catch (IOException io) {
            return null;
        }

    }
}